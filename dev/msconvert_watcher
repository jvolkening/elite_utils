# msconvert_watcher
#
# copyright 2017 Jeremy Volkening, UW-Madison
#
# Usage: msconvert_watcher.pl [target_dir]

use strict;
use warnings;
use 5.012;

use Config::Tiny;
use Digest::MD5;
use File::Basename qw/basename/;
use File::Temp;
use threads;
use Thread::Queue;
use Time::Piece;

use constant POLL_INTERVAL => 60; #seconds
use constant WAIT_TRIES    => 10;
use constant WAIT_TIME     => 2;  #seconds

my $BASE = $ARGV[0] // "T:/";


# configure msconvert
my @msconvert_mzml_args = (
    '--mzML',
    '--numpressAll',
    '--filter' => '"peakPicking true 1-"',
    '--filter' => '"defaultArrayLength 2-"',
);
my @msconvert_mgf_args = (
    '--mgf',
    '--filter' => '"peakPicking true 1-"',
    '--filter' => '"defaultArrayLength 2-"',
);

my $TARGET = "$BASE/incoming";
die "No target found (check that share is mounted and 'incoming' exists)\n"
    if (! -d $TARGET);
my $LOG = "$BASE/convert.log";

my $queue  = Thread::Queue->new;
my $worker = threads->create(\&process);

# %last is used to track previously seen files
my %last;
@last{ glob "$TARGET/*.ready" } = ();


print "msconvert monitor running (do not close)...\n";


LOOP:
while (1) {

    my @current = glob "$TARGET/*.ready";

    my %temp;
    @temp{ @current } = ();
    delete @temp{ keys %last };
    my @new = keys %temp;

    $queue->enqueue( @new )
        if (scalar @new);

    undef %last;
    @last{ @current } = ();

    sleep POLL_INTERVAL;

}

sub process {

  LOOP:
  while (defined( my $fn_new = $queue->dequeue )) {

    my $cfg;
    for (1..WAIT_TRIES) {
        $cfg = Config::Tiny->read($fn_new)->{_};
        last if ($cfg->{done});
        sleep WAIT_TIME;
    }
    next LOOP if (! $cfg->{done});

    open my $in, '<', $fn_new or die "Error opening $fn_new: $!\n";

    my $path   = $cfg->{path};
    my $fn_raw = $cfg->{file};
    my $type   = $cfg->{type};
    my $mzml   = $cfg->{mzml};
    my $mgf    = $cfg->{mgf};
    my $md5    = $cfg->{md5};

    next LOOP if (! defined $type || $type ne 'raw');
    next LOOP if (! $mzml && ! $mgf);

    if ($fn_raw =~ /[\\\/\&\|\;]/) {
        logger( "ERROR: invalid filename $fn_raw" );
        next LOOP;
    }
    if (! -e "$TARGET/$path$fn_raw") {
        logger("File not found: $TARGET/$path$fn_raw" );
        next LOOP;
    }

    if (open my $raw, '<:raw', "$TARGET/$path$fn_raw") {

        my $digest = Digest::MD5->new();
        $digest->addfile($raw);
        if ($digest->hexdigest() ne $md5) {
            logger( "Bad digest for $fn_raw" );
            next LOOP;
        }

    }
    else {
        logger("Error opening raw file $TARGET/$path$fn_raw: $!" );
        next LOOP;
    }

    convert( $fn_raw, $cfg, 'mzml', 'mzML', $path, \@msconvert_mzml_args )
        if ($mzml);
    convert( $fn_raw, $cfg, 'mgf', 'mgf', $path, \@msconvert_mgf_args )
        if ($mgf);

  }

}

sub logger {

    my ($msg) = @_;

    open my $log, '>>', $LOG
        or die "ERROR: failed to open log for writing: $!\n";
    say {$log} join "\t",
        localtime()->datetime(),
        $msg;
    close $log;

}

sub convert {

    my ($fn_raw, $cfg, $type, $suffix, $path, $arg_ref) = @_;

    my $fn_conv = basename($fn_raw);
    $fn_conv =~ s/\.raw$/\.$suffix/i;
    if (-e "$TARGET/$path$fn_conv") {
        logger("File $path$fn_conv already exists and won't overwrite\n");
        return;
    }
        
    my $ret = system(
        'msconvert',
        @{$arg_ref},
        '--outdir' => "\"$TARGET/$path\"",
        "\"$TARGET/$path$fn_raw\""
    );
    if ($ret) {
        logger( "msconvert to $type failed for $path$fn_raw" );
        return;
    }

    my $conv_digest;
    if ( open my $conv, '<:raw', "$TARGET/$path$fn_conv" ) {
        my $digest = Digest::MD5->new();
        $digest->addfile($conv);
        $conv_digest = $digest->hexdigest;
    }
    else {
        logger("Error opening $type file $TARGET/$path$fn_conv: $!" );
        return;
    }

    # prepare 'ready' file
    my $ready  = File::Temp->new(
        DIR    => $TARGET,
        UNLINK => 0,
        SUFFIX => '.ready',
    );

    my @pass_thru = qw/ galaxy_user galaxy_workflow /;
    say {$ready} "path=",     $path;
    say {$ready} "time=",     localtime()->datetime;
    say {$ready} "type=",     $type;
    say {$ready} "md5=",      $conv_digest;
    say {$ready} "file=",     $fn_conv;
    say {$ready} "transfer=", 1;

    for (grep {defined $cfg->{$_}} @pass_thru) {
        say {$ready} "$_=", $cfg->{$_};
    }
        
    say {$ready} "done=",     1;
    close $ready;

    logger( "Successfully converted $path$fn_raw" );

}

END {

    $queue->enqueue(undef);
    $worker->join();
}
